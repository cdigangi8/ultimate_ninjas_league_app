{"version":3,"file":"static/webpack/static/development/pages/update_season_standings.js.e588c88cee989f5cc948.hot-update.js","sources":["webpack:///./pages/update_season_standings.js"],"sourcesContent":["import React, { Component } from 'react';\nimport UNHeader from \"../components/header\";\nimport '../style/index.css';\nimport {getCompInfo, getCourseObstacles, postScorecard, getStandings, updateStandings, getAthletes, postUpdatedRankings} from '../api/api';\nimport {convertObstacles, calculateScore, resetObstacleArr,rankFunction, updateSeasonRanking} from '../controllers/controllers';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport { Column, Row } from 'simple-flexbox';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faListOl, faBars, faMapMarkerAlt, faHashtag, faCalendarDay } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faListOl, faBars, faMapMarkerAlt, faHashtag, faCalendarDay);\n\nclass UpdateStandings extends Component {\n\n\n    state = {\n        location: \"\",\n        athletes: [],\n        showLocationSelect: true,\n        showAgeSelect: false,\n        showCompetitors: false,\n        ageMin: '',\n        ageMax: '',\n        openDialog: false,\n        rankArr: [],\n        open: true\n    };\n\n    handleDrawer = () => {\n        if(this.state.open == false){\n            this.setState({ open: true });\n        }else{\n            this.setState({ open: false });\n        }\n        \n      };\n\n    handleChange = name => event => {\n        this.setState({\n            [name]: event.target.value,\n        });\n    };\n\n    setLocation(val){\n            this.setState({location: val, showAgeSelect: true, ageMin: '', ageMax: '', showCompetitors: false});\n    }\n\n    confirmSubmission(val){\n            this.setState({openDialog: true}); \n    }\n\n    closeDialog = (type) =>{\n        this.setState({ openDialog: false });\n}\n\n    setAgeGroup(min,max){\n        this.setState({ageMin: min, ageMax: max, showCompetitors: true});\n        getAthletes(this.state.location, max, min).then(resp=>{\n            getStandings(min, max, this.state.location).then(resp2=>{\n                this.setState({athletes: resp.data.athletes ,rankArr: resp2.data.standings});\n            });\n        });    \n    }\n\n    async updateSeasonRanks(arr){\n        console.log(arr);\n        let resolvedFinalArray = await Promise.all(arr.map(async(value) => { // map instead of forEach\n            const result = await postUpdatedRankings(value);\n            return result; // important to return the value\n        }));\n        var respArr = resolvedFinalArray;\n        console.log(respArr);\n    }\n\n    async updateSeasonStandings(){\n        let resolvedFinalArray = await Promise.all(this.state.athletes.map(async(value) => { // map instead of forEach\n            const result = await updateStandings(value, this.state.athletes.length);\n            return {pts: result.data.points, res: result.data.rankings, ath: value.athlete_id}; // important to return the value\n        }));\n        var respArr = resolvedFinalArray;\n        this.setState({showCompetitors: false, ageMin: '', ageMax: '', openDialog: false});\n        updateSeasonRanking(respArr).then(resp=>{\n            this.updateSeasonRanks(resp.array);\n        });\n    }\n\n    componentDidMount(){\n        console.log(this);\n    }\n\n    render(){\n    return <div className=\"mainBack\">\n        <UNHeader title='Update Youth League Standings' link='' linkTitle=''></UNHeader>\n        <Row>\n\n<div id=\"drawer-container\" style={{position: \"relative\"}}>\n        <CssBaseline />\n        <div\n          className={classNames('drawer', {\n            'drawerOpen': this.state.open,\n            'drawerClose': !this.state.open,\n          })}\n          classes={{\n            paper: classNames({\n                'drawerOpen': this.state.open,\n              'drawerClose': !this.state.open,\n            }),\n          }}\n          open={this.state.open}\n        >\n          <div className='toolbar'>\n          <span className=\"toolbarBtn\">\n            <FontAwesomeIcon onClick={this.handleDrawer} icon=\"bars\"/>\n            </span>\n            <span style={{marginLeft: \"20px\", fontWeight: \"bold\", color: \"rgb(62, 105, 154)\"}}>Options</span>\n          </div>\n\n            <Column className=\"optionSection\">\n                <Row vertical=\"center\" className=\"titleRow\">\n                        <div className=\"titleIcon\"><FontAwesomeIcon icon=\"map-marker-alt\"/></div>\n                        <div className=\"titleText\">Location</div>\n                    </Row>\n                    <Row vertical=\"center\" onClick={e=>this.setLocation(1)} className={this.state.location == '1' ? 'activeListItem optionRow' : 'optionRow'}>\n                        <div className=\"optionLetterIcon\">C</div>\n                        <div className=\"optionText\">Chicago</div>\n                    </Row>\n                    <Row vertical=\"center\" onClick={e=>this.setLocation(2)} className={this.state.location == '2' ? 'activeListItem optionRow' : 'optionRow'}>\n                        <div className=\"optionLetterIcon\">N</div>\n                        <div className=\"optionText\">Naperville</div>\n                    </Row>\n                    <Row vertical=\"center\" onClick={e=>this.setLocation(3)} className={this.state.location == '3' ? 'activeListItem optionRow' : 'optionRow'}>\n                        <div className=\"optionLetterIcon\">L</div>\n                        <div className=\"optionText\">Libertyville</div>\n                    </Row>\n                </Column>\n          {this.state.showAgeSelect == true ?\n\n            <Column className=\"optionSection\">\n            <Row vertical=\"center\" className=\"titleRow\">\n                    <div className=\"titleIcon\"><FontAwesomeIcon icon=\"hashtag\"/></div>\n                    <div className=\"titleText\">Age Group</div>\n                </Row>\n                <Row vertical=\"center\" onClick={e=>this.setAgeGroup(6,8)} className={this.state.ageMax == 8 ? 'activeListItem optionRow' : 'optionRow'}>\n                    <div className=\"optionLetterIcon\">1</div>\n                    <div className=\"optionText\">Ages 6-8</div>\n                </Row>\n                <Row vertical=\"center\" onClick={e=>this.setAgeGroup(9,10)} className={this.state.ageMax == 10 ? 'activeListItem optionRow' : 'optionRow'}>\n                    <div className=\"optionLetterIcon\">2</div>\n                    <div className=\"optionText\">Ages 9-10</div>\n                </Row>\n                <Row vertical=\"center\" onClick={e=>this.setAgeGroup(11,12)} className={this.state.ageMax == 12 ? 'activeListItem optionRow' : 'optionRow'}>\n                    <div className=\"optionLetterIcon\">3</div>\n                    <div className=\"optionText\">Ages 11-12</div>\n                </Row>\n                <Row vertical=\"center\" onClick={e=>this.setAgeGroup(13,16)} className={this.state.ageMax == 16 ? 'activeListItem optionRow' : 'optionRow'}>\n                    <div className=\"optionLetterIcon\">4</div>\n                    <div className=\"optionText\">Ages 13-16</div>\n                </Row>\n            </Column>\n          :null}\n        </div>\n        </div>\n                    <div className=\"pageContainer\">\n\n                        {this.state.showCompetitors == true ?\n                        <div>\n                            <button className='submitBtn' style={{marginBottom: \"0px\"}} onClick={ e => this.confirmSubmission('scorecard')}>Update Standings</button>\n                        <div className=\"subTitle\" style={{color: \"#ffffff\"}}>Standings</div>\n                        <Column horizontal=\"spaced\" wrap style={{marginTop: \"20px\"}}>\n                        {this.state.rankArr.map((item, index) => {\n                                return <div className=\"athleteStandingsBox\">\n                                    <Row horizontal='space-around' vertical='center'>\n                                        {/* <div>{index + 1}.</div> */}\n                                        <div>{item.rank}.</div>\n                                        <div>{item.first_name + ' ' + item.last_name.substring(0,1)}</div>\n                                        <div><div>{item.Points}</div><div style={{fontSize: \".8em\", color: \"rgb(225,225,225)\"}}>Pts.</div></div>\n                                    </Row>\n                                </div>\n                        })}\n                        </Column> </div>: null}\n                        \n                    </div>\n\n                    \n\n                </Row>\n\n                <Dialog\n                    open={this.state.openDialog}\n                    onClose={this.handleClose}\n                    aria-labelledby=\"form-dialog-title\"\n                >\n                    <DialogTitle id=\"form-dialog-title\">Are you sure you want to update the season standings?</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            \n            </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                    <Button type='submit' onClick={e => this.updateSeasonStandings()} color=\"primary\">\n                            Submit\n                    </Button>\n                        <Button type='submit' onClick={this.closeDialog} color=\"default\">\n                            Cancel\n            </Button>\n                    </DialogActions>\n                </Dialog>\n\n                \n\n        \n    </div>;\n    }\n  }\n\nexport default UpdateStandings;"],"mappings":"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","sourceRoot":""}