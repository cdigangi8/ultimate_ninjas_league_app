{"version":3,"file":"static/webpack/static/development/pages/results_entry.js.eca21dc44ad062552911.hot-update.js","sources":["webpack:///./controllers/controllers.js"],"sourcesContent":["export function convertObstacles(arr){\n    const p = new Promise((res,reject)=>{\n        var newArr = [];\n        arr.forEach(function(item, index){\n            item.choices = [];\n            item.time = '';\n            for(var i=0; i<=item.linear_points_available; i++){\n                item.choices.push({key: item.obstacle_id + ':' + i,value: i, selected: false});\n            }\n        })\n        res(arr);\n    })\n    return p;\n}\n\nexport function resetObstacleArr(arr){\n    const p = new Promise((res,reject)=>{\n        arr.forEach(function(item, index){\n            item.time = '';\n            for(var i=0; i<item.choices.length; i++){\n                item.choices[i].selected = false;\n            }\n        })\n        res(arr);\n    })\n    return p;\n}\n\nexport function calculateScore(arr){\n    const p = new Promise((res,reject)=>{\n        var resArr = [];\n        var totalScore = 0;\n        arr.forEach(function(item, index){\n            for(var i=0; i<item.choices.length; i++){\n                if(item.choices[i].selected == true){\n                    totalScore += item.choices[i].value;\n                    resArr.push({key: item.obstacle_id , value: item.choices[i].value, time: item.time});\n                }\n            }\n        })\n        var returnVar = {score: totalScore, resStr: resArr};\n        res(returnVar);\n    })\n    return p;\n}\n\nfunction checkResult(arr, id){\n    const found = arr.some(el => el.athlete_id === id);\n    return found;\n}\n\nfunction getAgeArray(arr, ageMin, ageMax){\n    var newArr = [];\n    for(var a=0; a<arr.length; a++){\n        if(arr[a].age >= ageMin && arr[a].age < ageMax+1){\n            newArr.push(arr[a]);\n        }\n    }\n    return newArr;\n}\n\nfunction compare(a, b) {\n    // Use toUpperCase() to ignore character casing\n    const pointsA = a.rank;\n    const pointsB = b.rank;\n  \n    let comparison = 0;\n    if (pointsA > pointsB || pointsB == '' || pointsA=='') {\n      comparison = 1;\n    }else if (pointsA < pointsB ) {\n      comparison = -1;\n    }\n    return comparison;\n  }\n\n  \nfunction rankArrFunc(arr){\n    var newArr = arr;\n    for(var a=0; a<arr.length;a++){\n        var rank = 1;\n        var newRank = false;\n        for(var b=0; b<arr.length;b++){\n        if(arr[a].points !== '' && arr[a].athlete_id !== arr[b].athlete_id){\n            if(arr[a].points == arr[b].points){\n                if(parseInt(arr[a].tieOB) > parseInt(arr[b].tieOB)){\n                    // arr[a].rank = rank;\n                    newRank = true;\n                }else if(arr[a].tieOB == arr[b].tieOB){\n                    if(arr[a].tieOB == ''){\n                        if(arr[a].tieTime < arr[b].tieTime){\n                            // arr[a].rank = rank;\n                            newRank = true;\n                        }else if(arr[a].tieTime == arr[b].tieTime){\n                            // arr[a].rank = rank;\n\n                            newRank = true;\n                        }else{\n                            rank += 1;\n                        }\n                    }else{\n                        var ath1res = JSON.parse(arr[a].resultStr);\n                        var ath1pts;\n                        var ath2res = JSON.parse(arr[b].resultStr);\n                        var ath2pts;\n                        console.log(ath1res);\n                        console.log(ath2res);\n                        for(var a1=0; a1<ath1res.length; a1++){\n                            // if(ath1res[a1].key == arr[a].tieOB){\n                            if((a1+1) == arr[a].tieOB){\n                                ath1pts = ath1res[a1].value;\n                                break;\n                            }\n                        }\n                        for(var a2=0; a2<ath2res.length; a2++){\n                            // if(ath2res[a2].key == arr[a].tieOB){\n                            if((a2+1) == arr[a].tieOB){ \n                                ath2pts = ath2res[a2].value;\n                                break;\n                            }\n                        }\n                        console.log(ath1pts + ' : ' + ath2pts);\n                        \n                        if(ath1pts > ath2pts){\n                            newRank = true;\n                        }else if(ath1pts == ath2pts){\n                            console.log('new rank');\n                            console.log(arr[a]);\n                            console.log(arr[b]);\n                            console.log(Date.parse('01/01/2018 ' + arr[a].tieTime) < Date.parse('01/01/2018 ' + arr[b].tieTime));\n                            if(Date.parse('01/01/2018 ' + arr[a].tieTime) < Date.parse('01/01/2018 ' + arr[b].tieTime)){\n                                newRank = true;\n                            }else if(Date.parse('01/01/2018 ' + arr[a].tieTime) == Date.parse('01/01/2018 ' + arr[b].tieTime)){\n                                newRank = true;\n                            }else{\n                                rank += 1;\n                            }\n                        }else{\n                            rank += 1;\n                        }\n                    }\n                }else{\n                    rank += 1;\n                }\n            }else if(arr[a].points < arr[b].points){\n                //lower points\n                rank += 1;\n            }else{\n                //more points\n                // arr[a].rank = rank;\n                newRank = true;\n            }\n        // }else{\n        //     newRank = true;\n        // }\n        }\n    }\n    \n    if(newRank == true){\n        arr[a].rank = rank;\n    }else{\n        arr[a].rank = arr.length;\n    }\n    }\n    return arr\n}\n\nexport function rankFunction(results, athletes, ageMin, ageMax){\n    const p = new Promise((res,reject)=>{\n        var completedCount = 0;\n        var kidArray = getAgeArray(athletes, ageMin,ageMax);\n        for(var a=0; a<kidArray.length; a++){\n            var resultMatch = checkResult(results, kidArray[a].athlete_id);\n            if(resultMatch == true){\n                for(var i=0; i<results.length; i++){\n                    if(kidArray[a].athlete_id == results[i].athlete_id){\n                        kidArray[a].points = results[i].Points;\n                        kidArray[a].tieOB = results[i].tiebreaker_obstacle;\n                        kidArray[a].tieTime = results[i].tiebreaker_time;\n                        kidArray[a].resultStr = results[i].result_string;\n                        kidArray[a].completed = true;\n                        completedCount += 1;\n                        break;\n                    }\n                }\n                \n            }else{\n                kidArray[a].points = '';\n                kidArray[a].tieOB = '';\n                kidArray[a].tieTime = '';\n                kidArray[a].resultStr = '';\n                kidArray[a].completed = false;\n                kidArray[a].rank = '';\n            }\n        }\n        var rankArray = rankArrFunc(kidArray);\n        rankArray.sort(compare);\n        res({array: rankArray, completedCount: completedCount});\n    })\n    return p;\n}\n\nexport function checkActiveScorecard(results, obstacles, athlete){\n    const p = new Promise((res,reject)=>{\n        var tiebreakMin = '';\n        var tiebreakSec = '';\n        var tiebreakMS = '';\n        var existingScorecard = false;\n        console.log(athlete);\n        for(var i=0; i<results.length; i++){\n            if(results[i].athlete_id == athlete){\n                console.log('success');\n                var resultArr = JSON.parse(results[i].result_string);\n                for(var z=0; z<obstacles.length; z++){\n                    for(var x=0; x<resultArr.length; x++){\n                        if(obstacles[z].obstacle_id == resultArr[x].key){\n                            for(var k=0; k<obstacles[z].choices.length; k++){\n                                if(obstacles[z].choices[k].value == resultArr[x].value){\n                                    obstacles[z].choices[k].selected = true;\n                                    if(resultArr[x].time){\n                                        obstacles[z].time = resultArr[x].time;\n                                    }\n                                    break;\n                                }\n                            }\n                            break;\n                        }\n                    }\n                }\n                tiebreakMin = results[i].tiebreaker_time.split(\":\")[1];\n                tiebreakSec = results[i].tiebreaker_time.split(\":\")[2].split(\".\")[0];\n                tiebreakMS = results[i].tiebreaker_time.split(\":\")[2].split(\".\")[1];\n                existingScorecard = true;\n                break;\n            }\n        }\n        res({obstacles: obstacles, min: tiebreakMin, sec: tiebreakSec, ms: tiebreakMS, existingScorecard: existingScorecard});\n    })\n    return p;\n}\n\nfunction sortArr(arr){\n    var cnt = 0;\n    for(var i=0; i<arr.length; i++){\n        if(arr[i].pts == 0){\n            cnt += 1;\n        }\n    }\n    if(cnt > 0){\n        for(var z=0; z<cnt; z++){\n            arr.push(arr[z]);\n        }\n        arr.splice(0, cnt);\n    }\n    return arr;\n}\n\nfunction getAvg(arr, comps){\n    arr = sortArr(arr);\n    console.log(arr);\n    var avg;\n    var num = 0;\n    var total;\n    if(arr.length < comps){\n        total = arr.length;\n    }else{\n        total = comps;\n    }\n    for(var i = 0; i<total; i++){\n            num += arr[i].rank;\n    }\n    if(total > 0){\n        avg = num/total;\n        console.log(avg);\n    }\n    return avg;\n}\n\nfunction getPts(arr, comps, athCnt){\n    var num = 0;\n    var total;\n    if(arr.length < comps){\n        total = arr.length;\n    }else{\n        total = comps;\n    }\n    for(var i = 0; i<total; i++){\n            num += athCnt - (arr[i].rank-1);\n    }\n    return num;\n}\n\nexport function updateSeasonRanking(athletes){\n    const p = new Promise((res,reject)=>{\n        for(var a=0; a<athletes.length; a++){\n            var rank = 1;\n            for(var b=0; b<athletes.length; b++){\n                var checkA;\n                var checkB;\n                if(athletes[a].ath !== athletes[b].ath){\n                    if(athletes[a].pts < athletes[b].pts){\n                        rank += 1;\n                    }else if(athletes[a].pts == athletes[b].pts){\n                        checkA = getAvg(athletes[a].res, 6);\n                        checkB = getAvg(athletes[b].res, 6);\n                        if(checkA > checkB){\n                            rank +=1;\n                        }else if(checkA == checkB){\n                            checkA = getPts(athletes[a].res, 7, athletes.length);\n                            checkB = getPts(athletes[b].res, 7, athletes.length);\n                            if(checkA < checkB){\n                                rank += 1;\n                            }else if(checkA == checkB){\n                                checkA = getAvg(athletes[a].res, 7);\n                                checkB = getAvg(athletes[b].res, 7);\n                                if(checkA > checkB){\n                                    rank +=1;\n                                }else if(checkA == checkB){\n                                    checkA = getPts(athletes[a].res, 8, athletes.length);\n                                    checkB = getPts(athletes[b].res, 8, athletes.length);\n                                    if(checkA < checkB){\n                                        rank += 1;\n                                    }else if(checkA == checkB){\n                                        checkA = getAvg(athletes[a].res, 8);\n                                        checkB = getAvg(athletes[b].res, 8);\n                                        if(checkA > checkB){\n                                            rank +=1;\n                                        }\n                                    }\n                            }\n                            }\n                        }\n                    }\n                }\n            }\n            athletes[a].rank = rank;\n        }\n        res({array: athletes});\n    })\n    return p;\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}