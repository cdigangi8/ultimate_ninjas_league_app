{"version":3,"file":"static/webpack/static/development/pages/results_entry.js.3ee8dab14a767fb6cdb5.hot-update.js","sources":["webpack:///./controllers/controllers.js"],"sourcesContent":["export function convertObstacles(arr){\n    const p = new Promise((res,reject)=>{\n        var newArr = [];\n        arr.forEach(function(item, index){\n            item.choices = [];\n            for(var i=0; i<=item.linear_points_available; i++){\n                item.choices.push({key: item.obstacle_id + ':' + i,value: i, selected: false});\n            }\n        })\n        res(arr);\n    })\n    return p;\n}\n\nexport function resetObstacleArr(arr){\n    const p = new Promise((res,reject)=>{\n        arr.forEach(function(item, index){\n            for(var i=0; i<item.choices.length; i++){\n                item.choices[i].selected = false;\n            }\n        })\n        res(arr);\n    })\n    return p;\n}\n\nexport function calculateScore(arr){\n    const p = new Promise((res,reject)=>{\n        var resArr = '';\n        var totalScore = 0;\n        arr.forEach(function(item, index){\n            for(var i=0; i<item.choices.length; i++){\n                if(item.choices[i].selected == true){\n                    totalScore += item.choices[i].value;\n                    if(resArr == ''){\n                        resArr = resArr + '{key: ' + item.obstacle_id + ', value: ' + item.choices[i].value + '}'\n                    }else{\n                        resArr = resArr + ',{key: ' + item.obstacle_id + ', value: ' + item.choices[i].value + '}'\n                    }\n                }\n            }\n        })\n        var returnVar = {score: totalScore, resStr: resArr};\n        res(returnVar);\n    })\n    return p;\n}\n\nfunction checkResult(arr, id){\n    const found = arr.some(el => el.athlete_id === id);\n    return found;\n}\n\nfunction getAgeArray(arr, ageMin, ageMax){\n    var newArr = [];\n    for(var a=0; a<arr.length; a++){\n        if(arr[a].age >= ageMin && arr[a].age < ageMax+1){\n            newArr.push(arr[a]);\n        }\n    }\n    return newArr;\n}\n\nfunction compare(a, b) {\n    // Use toUpperCase() to ignore character casing\n    const pointsA = a.points;\n    const pointsB = b.points;\n  \n    let comparison = 0;\n    if (pointsA > pointsB) {\n      comparison = 1;\n    }else if (pointsA < pointsB) {\n      comparison = -1;\n    }\n    return comparison;\n  }\n  \n\n\nexport function rankFunction(results, athletes){\n    const p = new Promise((res,reject)=>{\n\n        var kidArray = getAgeArray(athletes, 13,16);\n        for(var a=0; a<kidArray.length; a++){\n            var resultMatch = checkResult(results, kidArray[a].athlete_id);\n            console.log(resultMatch);\n            if(resultMatch == true){\n                for(var i=0; i<results.length; i++){\n                    if(kidArray[a].athlete_id == results[i].athlete_id){\n                        kidArray[a].points = results[i].Points;\n                        kidArray[a].tieOB = results[i].tiebreaker_obstacle;\n                        kidArray[a].tieTime = results[i].tiebreaker_time;\n                        kidArray[a].resultStr = results[i].result_string;\n                        kidArray[a].completed = true;\n                        break;\n                    }\n                }\n                // var rank = 1;\n                //     for(var k=0; k<kidArray.length;k++){\n                //         if(kidArray[k].points == '' ){\n                            \n                //         }else{\n                //             if(rankArr[k].age >= ageMin && athletes[a].age < ageMax+1){\n                //                 if(obj.points == rankArr[k].points){\n                //                     //tie in points\n                //                     if(obj.tieOB > rankArr[k].tieOB){\n                //                         obj.rank = rank;\n                //                         rankArr.splice((k-1), 0, obj);\n                //                         for(var z=k+1; z<rankArr.length; z++){\n                //                             if(rankArr[z].age >= ageMin && athletes[a].age < ageMax+1 && rankArr[z].rank !=''){\n                //                                 rankArr[z].rank += 1;\n                //                             }\n                //                         }\n                //                         break;\n                //                     }else if(obj.tieOB != '' && obj.tieOB == rankArr[k].tieOB){\n                //                         var ath1res = JSON.parse('['+obj.resultStr+']');\n                //                         var ath1pts;\n                //                         var ath2res = JSON.parse('['+rankArr[k].resultStr+']');\n                //                         var ath2pts;\n                //                         for(var a1=0; a1<ath1res.length; a1++){\n                //                             if(ath1res[a1].key == obj.tieOB){\n                //                                 ath1pts = ath1res[a1].value;\n                //                                 break;\n                //                             }\n                //                         }\n                //                         for(var a2=0; a2<ath2res.length; a2++){\n                //                             if(ath2res[a2].key == obj.tieOB){\n                //                                 ath2pts = ath2res[a2].value;\n                //                                 break;\n                //                             }\n                //                         }\n                //                         if(ath1pts > ath2pts){\n                //                             obj.rank = rank;\n                //                             rankArr.push(obj);\n                //                         }else if(ath1pts == ath2pts){\n                //                             if(obj.tieTime > rankArr[k].tieTime){\n                //                                 obj.rank = rank;\n                //                                 rankArr.push(obj);\n                //                             }else if(obj.tieTime == rankArr[k].tieTime){\n                //                                 obj.rank = rank;\n                //                                 rankArr.push(obj);\n                //                             }else{\n                //                                 rank += 1;\n                //                             }\n                //                         }else{\n                //                             rank += 1;\n                //                         }\n                //                     }\n                //                 }else if(obj.points < rankArr[k].points){\n                //                     //lower points\n                //                     rank += 1;\n                //                 }else{\n                //                     //more points\n                //                     obj.rank = rank;\n                //                     rankArr.push(obj);\n                //                 }\n                //             }\n                            \n                //         }\n                //     }\n            }else{\n                kidArray[a].points = '';\n                kidArray[a].tieOB = '';\n                kidArray[a].tieTime = '';\n                kidArray[a].resultStr = '';\n                kidArray[a].completed = false;\n                kidArray[a].rank = '';\n            }\n        }\n        // athletes.forEach(function(item, index){\n        //     var obj = {};\n        //     var ageMin;\n        //     var ageMax;\n        //     obj.first_name = item.first_name;\n        //     obj.last_name = item.last_name;\n        //     obj.athlete_id = item.athlete_id;\n        //     obj.age = item.age;\n        //     if(item.age == 6 || item.age == 7 || item.age == 8){\n        //         ageMin = 6;\n        //         ageMax = 8;\n        //     }else if(item.age == 9 || item.age == 10){\n        //         ageMin = 9;\n        //         ageMax = 10;\n        //     }else if(item.age == 11 || item.age == 12){\n        //         ageMin = 11;\n        //         ageMax = 12;\n        //     }else if(item.age == 13 || item.age == 16){\n        //         ageMin = 13;\n        //         ageMax = 16;\n        //     }\n        //     for(var i=0; i<results.length; i++){\n        //         if(item.athlete_id == results[i].athlete_id){\n        //             obj.points = results[i].Points;\n        //             obj.tieOB = results[i].tiebreaker_obstacle;\n        //             obj.tieTime = results[i].tiebreaker_time;\n        //             obj.resultStr = results[i].result_string;\n        //             obj.completed = true;\n        //             break;\n        //         }else{\n        //             obj.points = '';\n        //             obj.tieOB = '';\n        //             obj.tieTime = '';\n        //             obj.resultStr = '';\n        //             obj.completed = false;\n        //             obj.rank = '';\n        //         }\n        //     }\n        //     if(obj.points != ''){\n        //         var rank = 1;\n        //         if(rankArr.length < 1){\n        //             obj.rank = rank;\n        //             rankArr.push(rankArr);\n        //         }else{\n        //             for(var k=0; k<rankArr.length;k++){\n        //                 if(rankArr[k].points == '' ){\n        //                     obj.rank = rank;\n        //                     rankArr.unshift(obj);\n        //                 }else{\n        //                     if(rankArr[k].age >= ageMin && item.age < ageMax+1){\n        //                         if(obj.points == rankArr[k].points){\n        //                             //tie in points\n        //                             if(obj.tieOB > rankArr[k].tieOB){\n        //                                 obj.rank = rank;\n        //                                 rankArr.splice((k-1), 0, obj);\n        //                                 for(var z=k+1; z<rankArr.length; z++){\n        //                                     if(rankArr[z].age >= ageMin && item.age < ageMax+1 && rankArr[z].rank !=''){\n        //                                         rankArr[z].rank += 1;\n        //                                     }\n        //                                 }\n        //                                 break;\n        //                             }else if(obj.tieOB != '' && obj.tieOB == rankArr[k].tieOB){\n        //                                 var ath1res = JSON.parse('['+obj.resultStr+']');\n        //                                 var ath1pts;\n        //                                 var ath2res = JSON.parse('['+rankArr[k].resultStr+']');\n        //                                 var ath2pts;\n        //                                 ath1res.forEach((item,index)=>{\n        //                                     if(item.key == obj.tieOB){\n        //                                         ath1pts = item.value;\n        //                                     }\n        //                                 });\n        //                                 ath2res.forEach((item,index)=>{\n        //                                     if(item.key == rankArr[k].tieOB){\n        //                                         ath2pts = item.value;\n        //                                     }\n        //                                 });\n        //                                 if(ath1pts > ath2pts){\n        //                                     obj.rank = rank;\n        //                                     rankArr.splice((k-1), 0, obj);\n        //                                     for(var z=k+1; z<rankArr.length; z++){\n        //                                         if(rankArr[z].age >= ageMin && item.age < ageMax+1 && rankArr[z].rank !=''){\n        //                                             rankArr[z].rank += 1;\n        //                                         }\n        //                                     }\n        //                                     break;\n        //                                 }else if(ath1pts == ath2pts){\n        //                                     if(obj.tieTime > rankArr[k].tieTime){\n        //                                         obj.rank = rank;\n        //                                         rankArr.splice((k-1), 0, obj);\n        //                                         for(var z=k+1; z<rankArr.length; z++){\n        //                                             if(rankArr[z].age >= ageMin && item.age < ageMax+1 && rankArr[z].rank !=''){\n        //                                                 rankArr[z].rank += 1;\n        //                                             }\n        //                                         }\n        //                                         break;\n        //                                     }else if(obj.tieTime == rankArr[k].tieTime){\n        //                                         obj.rank = rank;\n        //                                         rankArr.splice((k-1), 0, obj);\n        //                                         break;\n        //                                     }else{\n        //                                         rank += 1;\n        //                                     }\n        //                                 }else{\n        //                                     rank += 1;\n        //                                 }\n        //                             }\n        //                         }else if(obj.points < rankArr[k].points){\n        //                             //lower points\n        //                             rank += 1;\n        //                         }else{\n        //                             //more points\n        //                             obj.rank = rank;\n        //                             rankArr.splice((k-1), 0, obj);\n        //                             for(var z=k+1; z<rankArr.length; z++){\n        //                                 if(rankArr[z].age >= ageMin && item.age < ageMax+1 && rankArr[z].rank !=''){\n        //                                     rankArr[z].rank += 1;\n        //                                 }\n        //                             }\n        //                             break;\n        //                         }\n        //                     }\n                            \n        //                 }\n        //             }\n        //         }\n        //     }else{\n        //         rankArr.push(obj);\n        //     }\n        // });\n        kidArray.sort(compare);\n        res(kidArray);\n    })\n    return p;\n}\n\n//need to return array of objects with:\n/*\nathlete first_name\nathlete last_name\nathlete id\nathlete age\nrank\npoints\n*/"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;A","sourceRoot":""}