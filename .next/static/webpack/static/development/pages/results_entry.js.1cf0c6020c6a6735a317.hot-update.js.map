{"version":3,"file":"static/webpack/static/development/pages/results_entry.js.1cf0c6020c6a6735a317.hot-update.js","sources":["webpack:///./components/StopWatch.js"],"sourcesContent":["import React, { Component } from 'react';\nimport '../style/stopwatch.css';\n\nimport Timer         from './Timer';\nimport Controls      from './Controls';\nimport LapTimeList   from './LapTimeList';\nimport { Column, Row } from 'simple-flexbox';\n\n\nfunction getDefaultState() {\n  return {\n    isRunning : false,\n    time      : 0,\n    timeList  : [],\n    choices: []    \n  }\n}\n\nclass Stopwatch extends Component {\n\n  constructor( props ) {\n    super(props);\n    this.state    = getDefaultState();\n    this.timerRef = null;\n  }\n\n  updateTimer(extraTime) {\n    const { time } = this.state;\n    // this.setState({ time : time + extraTime });\n    this.setState({ time : extraTime });\n  }\n\n\n//   setInterval(function() {\n//       var delta = Date.now() - start; // milliseconds elapsed since start\n//       â€¦\n//       output(Math.floor(delta / 1000)); // in seconds\n//       // alternatively just show wall clock time:\n//       output(new Date().toUTCString());\n//   }, 1000); // update about every second\n\n  start() {\n    var start = Date.now();\n    this.setState({\n      isRunning : true \n    }, () => {\n      this.timerRef = setInterval(\n        () => {\n            //  this.updateTimer( 10 ) \n            var delta = Date.now() - start; // milliseconds elapsed since start\n            this.updateTimer(delta);\n            }, 10\n      )\n    });\n  }\n\n  stop() {\n    this.setState({\n      isRunning : false \n    }, () => {\n      clearInterval(this.timerRef);\n    });\n  }\n\n//   reset() {\n//     this.setState(getDefaultState());\n//   }\n\n//   addLapTime() {\n//     const { time, timeList } = this.state;\n\n//     this.setState({\n//       timeList : [ ...timeList, time ] \n//     });\n//     this.someFn();\n//   }\n\n  addObstacleTime(val) {\n    var returnTime = this.state.time;\n      this.props.callbackFromParent(returnTime, val);\n      if(this.props.obstacleInd == (this.props.obstacleCnt-1)){\n        this.stop();\n      }\n  }\n\n  render() {\n\n    const { isRunning, time, timeList } = this.state;\n\n    return (\n      <div className=\"Stopwatch\">\n\n        <div style={{fontSize: '24px', fontWeight: 'bold'}}>Timer</div>\n\n        <Timer time={ time } />\n\n        <Controls\n          isRunning={ isRunning } \n          start={ () => this.start() }\n          stop={ () => this.stop() }\n        />\n\n        { isRunning ?\n          <div className=\"obstacleBox\">\n          <div  className=\"SWBoxTitle\">{this.props.obstacle}</div>\n          <Row horizontal=\"center\">\n          {this.props.choices.map((item, index) => {\n                return <div className={item.selected == true ? \"SWBoxContent activeBox\" : \"SWBoxContent\"} onClick={e=> this.addObstacleTime(item) }>{item.value}</div>\n            })}\n            </Row>\n          </div>\n          : null }  \n\n      </div>\n    );\n  }\n}\n\nexport default Stopwatch;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAHA;AAIA;AACA;;;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;;;;AAjGA;AACA;AAmGA;;;;A","sourceRoot":""}